/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista.cotizacion;

import clase.ListadoCotizacion;
import control.CategoriaDao;
import control.CotizacionDao;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Alfredo
 */
public class menuCotizacion extends javax.swing.JFrame {

    /**
     * Creates new form menuCotizacion
     */
    public menuCotizacion() {
        this.setTitle("Ventana Gestión cotizaciones");
        initComponents();
        this.generarFechaHoy();
        this.obtenerUltimoIdCotizacion();
        this.cargarTablaInicio();
    }

    public void obtenerUltimoIdCotizacion() {
        if (this.txt_idCotizacion.getText().equals("000000")) {
            CotizacionDao cotizacionx = new CotizacionDao();
            int idCotizacion = cotizacionx.obtenerIDCotizacion() + 1;
            this.txt_idCotizacion.setText(String.valueOf(idCotizacion));
        }
    }

    public void eliminarContenidoTabla() {
        DefaultTableModel tb = (DefaultTableModel) this.tablaCotizacion.getModel();
        int a = this.tablaCotizacion.getRowCount() - 1;
        for (int i = a; i >= 0; i--) {
            tb.removeRow(tb.getRowCount() - 1);
        }
    }

    public void cargarTablaInicio() {
        try {
            CotizacionDao cotix = new CotizacionDao();
            int idCotizacion = Integer.parseInt(this.txt_idCotizacion.getText());
            if (cotix.validarSiExiste(idCotizacion)) {
                DefaultTableModel modelo = (DefaultTableModel) this.tablaCotizacion.getModel();
                ArrayList<ListadoCotizacion> listado = cotix.listadoCotizacion(idCotizacion);

                Object[] fila = new Object[modelo.getColumnCount()];
                for (int i = 0; i < listado.size(); i++) {
                    fila[0] = listado.get(i).getIdCotizacion();
                    fila[1] = listado.get(i).getDescripcion();
                    fila[2] = listado.get(i).getCantidad();
                    fila[3] = listado.get(i).getPrecioUnitario();
                    fila[4] = listado.get(i).getSubTotal();
                    modelo.addRow(fila);
                }

                //Actualizar el texto de subTotal
            } else {
                if (this.tablaCotizacion.getRowCount() >= 0) {
                    this.eliminarContenidoTabla();
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Problema Tabla Proveedores: " + e.getMessage());
        }
    }

    public String cambiarFormatoMil(String valor) {
        String valorConSeparador = "";
        char[] arregloPaso = valor.toCharArray();
        int contadorPaso = 1;
        for (int i = arregloPaso.length - 1; i >= 0; i--) {
            if (contadorPaso == 3) {
                if (i == 0) {
                    valorConSeparador = valorConSeparador + arregloPaso[i];
                    contadorPaso = 1;
                } else {
                    valorConSeparador = valorConSeparador + arregloPaso[i] + ".";
                    contadorPaso = 1;
                }

            } else {
                valorConSeparador = valorConSeparador + arregloPaso[i];
                contadorPaso = contadorPaso + 1;
            }
            //System.out.println("LETRA: " + arregloPaso[i]);
        }

        StringBuilder stringPaso = new StringBuilder(valorConSeparador);
        valorConSeparador = stringPaso.reverse().toString();

        return valorConSeparador;
    }

    public void actualizarTotalCampoyBD(int idCotizacion) {
        CotizacionDao cotix = new CotizacionDao();
        if (cotix.validarSiExiste(idCotizacion)) {
            //Existe entonces rescato
            //REscato el total final de la lista
            long subTotal = cotix.devolverValorTotalListadoCotizacion(idCotizacion);
            //Necesito actualizar la tabla y el texto con ese total
            if (cotix.actualizarTotalCotizacion(idCotizacion, subTotal)) {
                JOptionPane.showMessageDialog(null, "Total Actualizado Correctamente");
                //Modificar Campo TOTAL
                this.txt_totalCotizacion.setText(this.cambiarFormatoMil(String.valueOf(subTotal)));
            }
            System.out.println("VALOR TOTAL: " + subTotal);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jLabel1 = new javax.swing.JLabel();
        txt_idCotizacion = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txt_fechaCreacion = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txt_nroOT = new javax.swing.JTextField();
        btnBuscarOT = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        cboEstadoCotizacion = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaCotizacion = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        btnAgregarItem = new javax.swing.JButton();
        btnEliminarItem = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txt_totalCotizacion = new javax.swing.JTextField();
        btnAgregarCotizacion = new javax.swing.JButton();
        btnModificarCotizacion = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        jScrollPane2.setViewportView(jTextPane1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("ID COTIZACIÓN:");

        txt_idCotizacion.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txt_idCotizacion.setText("000000");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Fecha Creación:");

        txt_fechaCreacion.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txt_fechaCreacion.setText("00-00-0000");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Nro° Orden de Trabajo:");

        btnBuscarOT.setText("?");
        btnBuscarOT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarOTActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Estado Cotizacion:");

        cboEstadoCotizacion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar", "Pendiente", "Aceptada" }));

        tablaCotizacion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "DESCRIPCION", "CANTIDAD", "P/U", "SUB TOTAL"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaCotizacion.getTableHeader().setReorderingAllowed(false);
        tablaCotizacion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaCotizacionMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaCotizacion);
        if (tablaCotizacion.getColumnModel().getColumnCount() > 0) {
            tablaCotizacion.getColumnModel().getColumn(3).setResizable(false);
        }

        btnAgregarItem.setText("AGREGAR");
        btnAgregarItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarItemActionPerformed(evt);
            }
        });

        btnEliminarItem.setText("ELIMINAR");
        btnEliminarItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarItemActionPerformed(evt);
            }
        });

        btnActualizar.setText("ACTUALIZAR");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        jLabel3.setText("TOTAL");

        txt_totalCotizacion.setEnabled(false);

        btnAgregarCotizacion.setText("AGREGAR");
        btnAgregarCotizacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarCotizacionActionPerformed(evt);
            }
        });

        btnModificarCotizacion.setText("MODIFICAR");
        btnModificarCotizacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarCotizacionActionPerformed(evt);
            }
        });

        btnEliminar.setText("ELIMINAR");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnLimpiar.setText("LIMPIAR");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txt_nroOT, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(txt_idCotizacion)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnBuscarOT)
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cboEstadoCotizacion, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnModificarCotizacion, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txt_fechaCreacion)
                                .addGap(157, 157, 157)
                                .addComponent(btnAgregarCotizacion, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 19, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(txt_totalCotizacion, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnEliminarItem, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnAgregarItem, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnActualizar, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE))))
                .addContainerGap())
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txt_idCotizacion)
                    .addComponent(jLabel2)
                    .addComponent(txt_fechaCreacion)
                    .addComponent(btnAgregarCotizacion)
                    .addComponent(btnEliminar))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txt_nroOT, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4)
                        .addComponent(btnBuscarOT)
                        .addComponent(jLabel5))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cboEstadoCotizacion)
                        .addComponent(btnModificarCotizacion)
                        .addComponent(btnLimpiar)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAgregarItem, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnEliminarItem, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_totalCotizacion, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(13, 13, 13))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBuscarOTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarOTActionPerformed
        // TODO add your handling code here:
        vista.cotizacion.menuBuscarOTCotizacion menu = new vista.cotizacion.menuBuscarOTCotizacion();
        menu.setVisible(true);
    }//GEN-LAST:event_btnBuscarOTActionPerformed

    public void validarCamposVacios(String dato, String campo) throws Exception {
        if (dato.trim().isEmpty()) {
            throw new Exception("El campo " + campo + " no puede venir en blanco");
        }
    }
    private void btnAgregarCotizacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarCotizacionActionPerformed
        try {
            this.validarCamposVacios(vista.cotizacion.menuCotizacion.txt_nroOT.getText(), "NUMERO ORDEN DE TRABAJO");
            if (this.cboEstadoCotizacion.getSelectedItem().equals("Seleccionar")) {
                throw new Exception("Seleccione un estado valido");
            }
            //Crear cotizacion
            CotizacionDao cotizacionx = new CotizacionDao();
            //Validar que exista
            int numeroCotizacion = Integer.parseInt(this.txt_idCotizacion.getText());
            int numeroOT = Integer.parseInt(vista.cotizacion.menuCotizacion.txt_nroOT.getText());
            String fechaCreacion = this.txt_fechaCreacion.getText();
            String estadoCotizacion = this.cboEstadoCotizacion.getSelectedItem().toString();

            if (!cotizacionx.validarSiExiste(numeroCotizacion)) {
                //Agregar
                if (cotizacionx.insertarCotizacion(fechaCreacion, numeroOT, estadoCotizacion)) {
                    JOptionPane.showMessageDialog(null, "Se agrego correctamente");
                } else {
                    JOptionPane.showMessageDialog(null, "No se pudo agregar");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Ya existe cotizacion con este ID");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_btnAgregarCotizacionActionPerformed

    public void limpiarCampos() {
        this.txt_idCotizacion.setText("000000");
        this.obtenerUltimoIdCotizacion();
        vista.cotizacion.menuCotizacion.txt_nroOT.setText("");
        this.cboEstadoCotizacion.setSelectedIndex(0);
        this.generarFechaHoy();
        this.eliminarContenidoTabla();
        this.txt_totalCotizacion.setText("0");
    }
    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        this.limpiarCampos();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnAgregarItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarItemActionPerformed
        try {
            CotizacionDao cotix = new CotizacionDao();
            int idCotiz = Integer.parseInt(this.txt_idCotizacion.getText());
            if (cotix.validarSiExiste(idCotiz)) {
                //Abrir ventana item
                vista.cotizacion.menuAgregarItemCotizacion menu = new vista.cotizacion.menuAgregarItemCotizacion();
                menu.setVisible(true);
                vista.cotizacion.menuAgregarItemCotizacion.txt_idCotizacion.setText(this.txt_idCotizacion.getText());
            } else {
                JOptionPane.showMessageDialog(null, "Primero debe agregar la cotizacion");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_btnAgregarItemActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        if (this.tablaCotizacion.getRowCount() == 0) {
            this.cargarTablaInicio();
            this.actualizarTotalCampoyBD(Integer.parseInt(this.txt_idCotizacion.getText()));
        } else {
            this.eliminarContenidoTabla();
            this.cargarTablaInicio();
            this.actualizarTotalCampoyBD(Integer.parseInt(this.txt_idCotizacion.getText()));
        }
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnEliminarItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarItemActionPerformed
        try {
            CotizacionDao cotix = new CotizacionDao();
            int idCotizacion = Integer.parseInt(this.txt_idCotizacion.getText());
            if (cotix.validarSiExiste(idCotizacion)) {
                //Consultar si tiene una fila seleccionada
                if (this.tablaCotizacion.getSelectedRow() < 0) {
                    throw new Exception("Para usar esta funcion, selecione una fila");
                }
                int idListadoCotizacion = Integer.parseInt(this.tablaCotizacion.getValueAt(this.tablaCotizacion.getSelectedRow(), 0).toString());

                int confirmacion = JOptionPane.YES_NO_OPTION;
                int numeroConfirmacion = JOptionPane.showConfirmDialog(null, "¿Desea Eliminarlo Realmente?", "Warning", confirmacion);
                if (numeroConfirmacion == 0) {
                    //Eliminar
                    if (cotix.eliminarListadoCotizacion(idListadoCotizacion)) {
                        JOptionPane.showMessageDialog(null, "Eliminado Correctamente");
                        this.eliminarContenidoTabla();
                        this.cargarTablaInicio();
                        this.actualizarTotalCampoyBD(idCotizacion);
                    }
                }

            } else {
                JOptionPane.showMessageDialog(null, "Primero debe crear la cotizacion");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_btnEliminarItemActionPerformed

    private void btnModificarCotizacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarCotizacionActionPerformed
        try {
            CotizacionDao cotix = new CotizacionDao();
            int idCotizacion = Integer.parseInt(vista.cotizacion.menuCotizacion.txt_idCotizacion.getText());
            if (cotix.validarSiExiste(idCotizacion)) {
                //Validar Datos
                this.validarCamposVacios(vista.cotizacion.menuCotizacion.txt_nroOT.getText(), "NUMERO ORDEN DE TRABAJO");
                if (vista.cotizacion.menuCotizacion.cboEstadoCotizacion.getSelectedIndex() == 0) {
                    throw new Exception("Seleccione un estado Valido");
                }
                String estadoCotizacion = vista.cotizacion.menuCotizacion.cboEstadoCotizacion.getSelectedItem().toString();
                int numeroOT = Integer.parseInt(vista.cotizacion.menuCotizacion.txt_nroOT.getText());

                /*Modificar datos entrada*/
                if (cotix.modificarCotizacion(numeroOT, estadoCotizacion, idCotizacion)) {
                    JOptionPane.showMessageDialog(null, "Modificado Correctamente");
                } else {
                    JOptionPane.showMessageDialog(null, "No se pudo modificar");
                }

            } else {
                JOptionPane.showMessageDialog(null, "Debe agregar una cotizacion primero");
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_btnModificarCotizacionActionPerformed

    private void tablaCotizacionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaCotizacionMouseClicked
        if (evt.getClickCount() == 2) {
            //Enviar datos a modificar
            int idListadoCotizacion = Integer.parseInt(this.tablaCotizacion.getValueAt(this.tablaCotizacion.getSelectedRow(), 0).toString());
            String descripcion = this.tablaCotizacion.getValueAt(this.tablaCotizacion.getSelectedRow(), 1).toString();
            int cantidad = Integer.parseInt(vista.cotizacion.menuCotizacion.tablaCotizacion.getValueAt(vista.cotizacion.menuCotizacion.tablaCotizacion.getSelectedRow(), 2).toString());
            long precioUnitario = Long.parseLong(vista.cotizacion.menuCotizacion.tablaCotizacion.getValueAt(vista.cotizacion.menuCotizacion.tablaCotizacion.getSelectedRow(), 3).toString());
            Long subTotal = Long.parseLong(this.tablaCotizacion.getValueAt(this.tablaCotizacion.getSelectedRow(), 4).toString());

            vista.cotizacion.menuModificarItemCotizacion menu = new vista.cotizacion.menuModificarItemCotizacion();
            menu.setVisible(true);
            int idCotizacion = Integer.parseInt(vista.cotizacion.menuCotizacion.txt_idCotizacion.getText());
            vista.cotizacion.menuModificarItemCotizacion.txt_idCotizacion.setText(String.valueOf(idCotizacion));
            vista.cotizacion.menuModificarItemCotizacion.txt_idListadoCotizacion.setText(String.valueOf(idListadoCotizacion));
            vista.cotizacion.menuModificarItemCotizacion.txt_descripcion.setText(descripcion);
            vista.cotizacion.menuModificarItemCotizacion.txt_valorITem.setText(this.cambiarFormatoMil(String.valueOf(subTotal)));
            vista.cotizacion.menuModificarItemCotizacion.txt_cantidad.setText(String.valueOf(cantidad));
            vista.cotizacion.menuModificarItemCotizacion.txt_precioUnitario.setText(this.cambiarFormatoMil(String.valueOf(precioUnitario)));
        }
    }//GEN-LAST:event_tablaCotizacionMouseClicked

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        try {
            CotizacionDao cotiza = new CotizacionDao();
            int idCotiza = Integer.parseInt(vista.cotizacion.menuCotizacion.txt_idCotizacion.getText());
            if (cotiza.validarSiExiste(idCotiza)) {
                //Consultar
                int confirmacion = JOptionPane.YES_NO_OPTION;
                //System.out.println("Numero Confirmacion ELiminacion: "+ confirmacion);
                int numeroConfirmacion = JOptionPane.showConfirmDialog(null, "¿Desea Eliminarlo Realmente?", "Warning", confirmacion);

                if (numeroConfirmacion == 0) {
                    //Accion eliminar cotiza
                    if (cotiza.eliminarCotizacion(idCotiza)) {
                        JOptionPane.showMessageDialog(null, "Eliminado Correctamente");
                        this.dispose();
                    }else{
                        JOptionPane.showMessageDialog(null, "Error al eliminar");
                    }
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    public void generarFechaHoy() {
        Calendar today = Calendar.getInstance();
        Date fechaHoy = today.getTime();
        SimpleDateFormat format = new SimpleDateFormat("dd-MM-yyyy");
        String fechaStringBase = format.format(fechaHoy);
        //System.out.println("Fecha: " + fechaStringBase);
        this.txt_fechaCreacion.setText(fechaStringBase);
    }

//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(menuCotizacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(menuCotizacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(menuCotizacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(menuCotizacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new menuCotizacion().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnAgregarCotizacion;
    private javax.swing.JButton btnAgregarItem;
    private javax.swing.JButton btnBuscarOT;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnEliminarItem;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnModificarCotizacion;
    public static javax.swing.JComboBox<String> cboEstadoCotizacion;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextPane jTextPane1;
    public static javax.swing.JTable tablaCotizacion;
    public static javax.swing.JLabel txt_fechaCreacion;
    public static javax.swing.JLabel txt_idCotizacion;
    public static javax.swing.JTextField txt_nroOT;
    public static javax.swing.JTextField txt_totalCotizacion;
    // End of variables declaration//GEN-END:variables
}
