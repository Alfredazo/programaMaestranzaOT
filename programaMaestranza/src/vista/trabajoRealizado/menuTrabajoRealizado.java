/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista.trabajoRealizado;

import clase.ListadoTrabajosRealizados;
import control.TrabajosRealizadosDao;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Alfredo
 */
public class menuTrabajoRealizado extends javax.swing.JFrame {

    /**
     * Creates new form menuTrabajoRealizado
     */
    public menuTrabajoRealizado() {
        this.setTitle("Ventana Gestión Trabajos Realizados");
        initComponents();
        this.obtenerUltimoIdInsumo();
    }

    public void obtenerUltimoIdInsumo() {
        if (this.txt_idTrabajoRealizado.getText().equals("00000")) {
            TrabajosRealizadosDao trabajox = new TrabajosRealizadosDao();
            int idTrabajoRealizado = trabajox.obtenerUltimoIDTrabajosRealizados() + 1;
            this.txt_idTrabajoRealizado.setText(String.valueOf(idTrabajoRealizado));
        }
    }

    public void eliminarContenidoTabla() {
        DefaultTableModel tb = (DefaultTableModel) this.tablaTrabajoRealizado.getModel();
        int a = this.tablaTrabajoRealizado.getRowCount() - 1;
        for (int i = a; i >= 0; i--) {
            tb.removeRow(tb.getRowCount() - 1);
        }
    }

    public void cargarTablaInicio() {
        try {
            TrabajosRealizadosDao trx = new TrabajosRealizadosDao();
            int idTrabajoRealizado = Integer.parseInt(vista.trabajoRealizado.menuTrabajoRealizado.txt_idTrabajoRealizado.getText());
            DefaultTableModel modelo = (DefaultTableModel) this.tablaTrabajoRealizado.getModel();
            ArrayList<ListadoTrabajosRealizados> listado = trx.listadoITEMSTrabajosRealizados(idTrabajoRealizado);

            Object[] fila = new Object[modelo.getColumnCount()];
            for (int i = 0; i < listado.size(); i++) {
                fila[0] = listado.get(i).getIdListadoTrabajosRealizado();
                fila[1] = listado.get(i).getNombreTrabajo();
                fila[2] = listado.get(i).getTipoTrabajo();
                fila[3] = listado.get(i).getNombreDepto();
                fila[4] = listado.get(i).getHorasTrabajadas();
                fila[5] = listado.get(i).getValorHora();
                fila[6] = listado.get(i).getSubTotal();
                modelo.addRow(fila);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Problema Tabla Proveedores: " + e.getMessage());
        }
    }

    public void actualizarTotalCampoyBD(int idTrabajoRealizado) {
        TrabajosRealizadosDao trabajox = new TrabajosRealizadosDao();
        if (trabajox.validarQueNoExistaOTTrabajoRealizadoCabeceraPorID(idTrabajoRealizado)) {
            //Existe entonces rescato
            //REscato el total final de la lista
            long subTotal = trabajox.devolverTotalITEMListadoTrabajos(idTrabajoRealizado);

            //Necesito actualizar la tabla y el texto con ese total
            if (trabajox.actualizarTotalTrabajosRealizados(subTotal, idTrabajoRealizado)) {
                JOptionPane.showMessageDialog(null, "Total Actualizado Correctamente");
                //Modificar Campo TOTAL
                vista.trabajoRealizado.menuTrabajoRealizado.txt_total.setText(this.cambiarFormatoMil(String.valueOf(subTotal)));
            }
            System.out.println("VALOR TOTAL: " + subTotal);
        }
    }

    public String cambiarFormatoMil(String valor) {
        String valorConSeparador = "";
        char[] arregloPaso = valor.toCharArray();
        int contadorPaso = 1;
        for (int i = arregloPaso.length - 1; i >= 0; i--) {
            if (contadorPaso == 3) {
                if (i == 0) {
                    valorConSeparador = valorConSeparador + arregloPaso[i];
                    contadorPaso = 1;
                } else {
                    valorConSeparador = valorConSeparador + arregloPaso[i] + ".";
                    contadorPaso = 1;
                }

            } else {
                valorConSeparador = valorConSeparador + arregloPaso[i];
                contadorPaso = contadorPaso + 1;
            }
            //System.out.println("LETRA: " + arregloPaso[i]);
        }

        StringBuilder stringPaso = new StringBuilder(valorConSeparador);
        valorConSeparador = stringPaso.reverse().toString();

        return valorConSeparador;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txt_NroOT = new javax.swing.JTextField();
        txt_idTrabajoRealizado = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnBuscarOT = new javax.swing.JButton();
        btnAgregar = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaTrabajoRealizado = new javax.swing.JTable();
        btnAgregarItem = new javax.swing.JButton();
        btnEliminarItem = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txt_total = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("ID Trabajo Realizado:");

        txt_idTrabajoRealizado.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txt_idTrabajoRealizado.setText("00000");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Nro° Orden de Trabajo:");

        btnBuscarOT.setText("?");
        btnBuscarOT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarOTActionPerformed(evt);
            }
        });

        btnAgregar.setText("AGREGAR");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        btnModificar.setText("MODIFICAR");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        btnLimpiar.setText("LIMPIAR");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        btnEliminar.setText("ELIMINAR");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        tablaTrabajoRealizado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "TRABAJO", "TIPO", "DPTO", "HH", "VALOR HH", "SUB TOTAL"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaTrabajoRealizado.getTableHeader().setReorderingAllowed(false);
        tablaTrabajoRealizado.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaTrabajoRealizadoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaTrabajoRealizado);

        btnAgregarItem.setText("AGREGAR");
        btnAgregarItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarItemActionPerformed(evt);
            }
        });

        btnEliminarItem.setText("ELIMINAR");
        btnEliminarItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarItemActionPerformed(evt);
            }
        });

        btnActualizar.setText("ACTUALIZAR");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("TOTAL:");

        txt_total.setText("0");
        txt_total.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txt_idTrabajoRealizado)
                        .addGap(83, 83, 83)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txt_NroOT, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBuscarOT)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnModificar, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                            .addComponent(btnAgregar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                            .addComponent(btnLimpiar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(txt_total, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1181, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAgregarItem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnEliminarItem, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                            .addComponent(btnActualizar, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAgregar)
                            .addComponent(btnEliminar))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnModificar)
                            .addComponent(btnLimpiar)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txt_NroOT, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnBuscarOT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1)
                            .addComponent(txt_idTrabajoRealizado))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAgregarItem, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnEliminarItem, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_total, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        try {
            if (this.txt_NroOT.getText().isEmpty()) {
                throw new Exception("El campo NRO° DE ORDEN DE TRABAJO , no puede venir en blanco");
            }

            TrabajosRealizadosDao trabajox = new TrabajosRealizadosDao();
            int numeroOT = Integer.parseInt(vista.trabajoRealizado.menuTrabajoRealizado.txt_NroOT.getText());
            if (!trabajox.validarQueNoExistaOTTrabajoRealizadoCabecera(numeroOT)) {
                int nroOT = Integer.parseInt(this.txt_NroOT.getText());

                if (trabajox.insertarTrabajosRealizadoCabecera(numeroOT)) {
                    JOptionPane.showMessageDialog(null, "Agregado Correctamente");
                } else {
                    JOptionPane.showMessageDialog(null, "No se pudo agregar");
                }
            } else {
                JOptionPane.showMessageDialog(null, "El Nro° Orden de Trabajo, ya esta asignado a un Id de Trabajos realizados");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void btnBuscarOTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarOTActionPerformed
        vista.trabajoRealizado.menuConsultarOTExportar menu = new vista.trabajoRealizado.menuConsultarOTExportar();
        menu.setVisible(true);
    }//GEN-LAST:event_btnBuscarOTActionPerformed

    public void limpiarCampos() {
        this.txt_idTrabajoRealizado.setText("00000");
        this.obtenerUltimoIdInsumo();
        vista.trabajoRealizado.menuTrabajoRealizado.txt_NroOT.setText("");
        //Limpiar tabla
        this.eliminarContenidoTabla();
        this.txt_total.setText("0");
    }

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        this.limpiarCampos();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnAgregarItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarItemActionPerformed
        try {
            int idTrabajoRealizado = Integer.parseInt(this.txt_idTrabajoRealizado.getText());
            TrabajosRealizadosDao trabajox = new TrabajosRealizadosDao();
            if (trabajox.validarQueNoExistaOTTrabajoRealizadoCabeceraPorID(idTrabajoRealizado)) {

                vista.trabajoRealizado.agregarITEMTrabajoRealizado menu = new vista.trabajoRealizado.agregarITEMTrabajoRealizado();
                menu.setVisible(true);

                vista.trabajoRealizado.agregarITEMTrabajoRealizado.txt_idTrabajosRealizados.setText(String.valueOf(idTrabajoRealizado));

            } else {
                JOptionPane.showMessageDialog(null, "EL ID No existe, favor agregar primero");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_btnAgregarItemActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        try {
            if (this.txt_NroOT.getText().isEmpty()) {
                throw new Exception("El campo NRO° DE ORDEN DE TRABAJO , no puede venir en blanco");
            }
            TrabajosRealizadosDao trabajox = new TrabajosRealizadosDao();
            int numeroOT = Integer.parseInt(vista.trabajoRealizado.menuTrabajoRealizado.txt_NroOT.getText());
            int idTrabajoRealizado = Integer.parseInt(vista.trabajoRealizado.menuTrabajoRealizado.txt_idTrabajoRealizado.getText());
            if (!trabajox.validarQueNoExistaOTTrabajoRealizadoCabecera(numeroOT)) {
                if (trabajox.validarQueNoExistaOTTrabajoRealizadoCabeceraPorID(idTrabajoRealizado)) {
                    //Modificar
                    if (trabajox.modificarTrabajosRealizadoCabecera(numeroOT, idTrabajoRealizado)) {
                        JOptionPane.showMessageDialog(null, "Se modifico correctamente");
                    } else {
                        JOptionPane.showMessageDialog(null, "No se pudo modificar");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "No existe el id, favor agregar");
                }
            } else {
                JOptionPane.showMessageDialog(null, "El numero de ot ya esta asignado a un trabajo realizado");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_btnModificarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        try {
            TrabajosRealizadosDao trabajox = new TrabajosRealizadosDao();
            int idTrabajoRealizado = Integer.parseInt(vista.trabajoRealizado.menuTrabajoRealizado.txt_idTrabajoRealizado.getText());
            if (trabajox.validarQueNoExistaOTTrabajoRealizadoCabeceraPorID(idTrabajoRealizado)) {
                int confirmacion = JOptionPane.YES_NO_OPTION;
                int numeroConfirmacion = JOptionPane.showConfirmDialog(null, "¿Desea Eliminarlo Realmente?", "Warning", confirmacion);
                if (numeroConfirmacion == 0) {
                    //Eliminar
                    if (trabajox.eliminarTrabajosRealizadoCabecera(idTrabajoRealizado)) {
                        JOptionPane.showMessageDialog(null, "Eliminado Correctamente");
                        this.dispose();
                    } else {
                        JOptionPane.showMessageDialog(null, "No se pudo eliminar");
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "No existe el id, favor agregar");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        if (this.tablaTrabajoRealizado.getRowCount() > 0) {
            this.eliminarContenidoTabla();
        }
        this.cargarTablaInicio();
        int idTrabajoRealizado = Integer.parseInt(vista.trabajoRealizado.menuTrabajoRealizado.txt_idTrabajoRealizado.getText());
        this.actualizarTotalCampoyBD(idTrabajoRealizado);
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnEliminarItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarItemActionPerformed
        try {
            TrabajosRealizadosDao trabajox = new TrabajosRealizadosDao();
            int idTrabajoRealizado = Integer.parseInt(vista.trabajoRealizado.menuTrabajoRealizado.txt_idTrabajoRealizado.getText());

            if (trabajox.validarQueNoExistaOTTrabajoRealizadoCabeceraPorID(idTrabajoRealizado)) {
                int confirmacion = JOptionPane.YES_NO_OPTION;
                int numeroConfirmacion = JOptionPane.showConfirmDialog(null, "¿Desea Eliminarlo Realmente?", "Warning", confirmacion);
                if (numeroConfirmacion == 0) {
                    //ELiminar item
                    int idListadoTrabajoRealizado = Integer.parseInt(vista.trabajoRealizado.menuTrabajoRealizado.tablaTrabajoRealizado.getValueAt(vista.trabajoRealizado.menuTrabajoRealizado.tablaTrabajoRealizado.getSelectedRow(), 0).toString());
                    if (trabajox.eliminarITEMListadoTrabajoRealizados(idListadoTrabajoRealizado)) {
                        JOptionPane.showMessageDialog(null, "Eliminado Correctamente");
                        this.eliminarContenidoTabla();
                        this.cargarTablaInicio();
                        this.actualizarTotalCampoyBD(idTrabajoRealizado);

                    } else {
                        JOptionPane.showMessageDialog(null, "No se pudo eliminar");
                    }
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_btnEliminarItemActionPerformed

    private void tablaTrabajoRealizadoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaTrabajoRealizadoMouseClicked
        try {
            if (evt.getClickCount() == 2) {
                //Rescatar datos y enviar a venta modificar
                int idITEM = Integer.parseInt(vista.trabajoRealizado.menuTrabajoRealizado.tablaTrabajoRealizado.getValueAt(vista.trabajoRealizado.menuTrabajoRealizado.tablaTrabajoRealizado.getSelectedRow(), 0).toString());
                String nombreTrabajo = vista.trabajoRealizado.menuTrabajoRealizado.tablaTrabajoRealizado.getValueAt(vista.trabajoRealizado.menuTrabajoRealizado.tablaTrabajoRealizado.getSelectedRow(), 1).toString();
                String nombreDepto = vista.trabajoRealizado.menuTrabajoRealizado.tablaTrabajoRealizado.getValueAt(vista.trabajoRealizado.menuTrabajoRealizado.tablaTrabajoRealizado.getSelectedRow(), 3).toString();
                double horasTrabajadas = Double.parseDouble(vista.trabajoRealizado.menuTrabajoRealizado.tablaTrabajoRealizado.getValueAt(vista.trabajoRealizado.menuTrabajoRealizado.tablaTrabajoRealizado.getSelectedRow(), 4).toString());
                long subTotal = Long.parseLong(vista.trabajoRealizado.menuTrabajoRealizado.tablaTrabajoRealizado.getValueAt(vista.trabajoRealizado.menuTrabajoRealizado.tablaTrabajoRealizado.getSelectedRow(), 6).toString());
            
                //Rescatar id tipo
                TrabajosRealizadosDao trx = new TrabajosRealizadosDao();
                int idTipo = trx.obtenerIDTipoTrabajoItemListado(nombreDepto);
                String descripcion = trx.obtenerDescripcion(idITEM);
                int idTrabajoRealizado = Integer.parseInt(vista.trabajoRealizado.menuTrabajoRealizado.txt_idTrabajoRealizado.getText());
                
                vista.trabajoRealizado.modificarITEMTrabajoRealizado menu = new vista.trabajoRealizado.modificarITEMTrabajoRealizado();
                menu.setVisible(true);
                
                vista.trabajoRealizado.modificarITEMTrabajoRealizado.txt_idTrabajosRealizados.setText(String.valueOf(idTrabajoRealizado));
                vista.trabajoRealizado.modificarITEMTrabajoRealizado.txt_id_itemTrabajosRealizados.setText(String.valueOf(idITEM));
                vista.trabajoRealizado.modificarITEMTrabajoRealizado.txt_nombreTrabajo.setText(nombreTrabajo);
                vista.trabajoRealizado.modificarITEMTrabajoRealizado.txt_descripcion.setText(descripcion);
                vista.trabajoRealizado.modificarITEMTrabajoRealizado.txt_tipoTrabajo.setText(String.valueOf(idTipo));
                vista.trabajoRealizado.modificarITEMTrabajoRealizado.txt_horasTrabajadas.setText(String.valueOf(horasTrabajadas));
                vista.trabajoRealizado.modificarITEMTrabajoRealizado.txt_subTotal.setText(this.cambiarFormatoMil(String.valueOf(subTotal)));
            
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_tablaTrabajoRealizadoMouseClicked

//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(menuTrabajoRealizado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(menuTrabajoRealizado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(menuTrabajoRealizado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(menuTrabajoRealizado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new menuTrabajoRealizado().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnAgregarItem;
    private javax.swing.JButton btnBuscarOT;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnEliminarItem;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    public static javax.swing.JTable tablaTrabajoRealizado;
    public static javax.swing.JTextField txt_NroOT;
    public static javax.swing.JLabel txt_idTrabajoRealizado;
    public static javax.swing.JTextField txt_total;
    // End of variables declaration//GEN-END:variables
}
